"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2016-2023, Pulumi Corporation.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _DiagnosticSeverity:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _DiagnosticSeverityEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_DiagnosticSeverity.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    DIAG_UNDEFINED: _DiagnosticSeverity.ValueType  # 0
    DIAG_ERROR: _DiagnosticSeverity.ValueType  # 1
    DIAG_WARNING: _DiagnosticSeverity.ValueType  # 2

class DiagnosticSeverity(_DiagnosticSeverity, metaclass=_DiagnosticSeverityEnumTypeWrapper):
    """DiagnosticSeverity is the severity level of a diagnostic message."""

DIAG_UNDEFINED: DiagnosticSeverity.ValueType  # 0
DIAG_ERROR: DiagnosticSeverity.ValueType  # 1
DIAG_WARNING: DiagnosticSeverity.ValueType  # 2
global___DiagnosticSeverity = DiagnosticSeverity

@typing_extensions.final
class Pos(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    LINE_FIELD_NUMBER: builtins.int
    COLUMN_FIELD_NUMBER: builtins.int
    BYTE_FIELD_NUMBER: builtins.int
    line: builtins.int
    column: builtins.int
    byte: builtins.int
    def __init__(
        self,
        *,
        line: builtins.int = ...,
        column: builtins.int = ...,
        byte: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["byte", b"byte", "column", b"column", "line", b"line"]) -> None: ...

global___Pos = Pos

@typing_extensions.final
class Range(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FILENAME_FIELD_NUMBER: builtins.int
    START_FIELD_NUMBER: builtins.int
    END_FIELD_NUMBER: builtins.int
    filename: builtins.str
    @property
    def start(self) -> global___Pos: ...
    @property
    def end(self) -> global___Pos: ...
    def __init__(
        self,
        *,
        filename: builtins.str = ...,
        start: global___Pos | None = ...,
        end: global___Pos | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["end", b"end", "start", b"start"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["end", b"end", "filename", b"filename", "start", b"start"]) -> None: ...

global___Range = Range

@typing_extensions.final
class Diagnostic(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SEVERITY_FIELD_NUMBER: builtins.int
    SUMMARY_FIELD_NUMBER: builtins.int
    DETAIL_FIELD_NUMBER: builtins.int
    SUBJECT_FIELD_NUMBER: builtins.int
    CONTEXT_FIELD_NUMBER: builtins.int
    severity: global___DiagnosticSeverity.ValueType
    summary: builtins.str
    detail: builtins.str
    @property
    def subject(self) -> global___Range: ...
    @property
    def context(self) -> global___Range: ...
    def __init__(
        self,
        *,
        severity: global___DiagnosticSeverity.ValueType = ...,
        summary: builtins.str = ...,
        detail: builtins.str = ...,
        subject: global___Range | None = ...,
        context: global___Range | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["context", b"context", "subject", b"subject"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["context", b"context", "detail", b"detail", "severity", b"severity", "subject", b"subject", "summary", b"summary"]) -> None: ...

global___Diagnostic = Diagnostic
